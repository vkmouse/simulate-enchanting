import unittest
from simulate_enchanting.parser.category_parser import CategoryParser

class TestCategoryParser(unittest.TestCase):
    def testParse(self):
        parser = CategoryParser()
        self.assertEqual(parser.parse('HP 自然恢復速度 + 5~10%'), { 'Name': 'HP自然恢復量', 'IsPercentage': True })
        self.assertEqual(parser.parse('HP自然恢復速度+5~10%'), { 'Name': 'HP自然恢復量', 'IsPercentage': True })
        self.assertEqual(parser.parse('HP自然恢復量+20%'), { 'Name': 'HP自然恢復量', 'IsPercentage': True })
        self.assertEqual(parser.parse('SP 自然恢復速度 + 5~10%'), { 'Name': 'SP自然恢復量', 'IsPercentage': True })
        self.assertEqual(parser.parse('SP自然恢復速度+5~10%'), { 'Name': 'SP自然恢復量', 'IsPercentage': True })
        self.assertEqual(parser.parse('SP自然恢復量+20%'), { 'Name': 'SP自然恢復量', 'IsPercentage': True })
        self.assertEqual(parser.parse('變動施法時間減少5~12%'), { 'Name': '變動詠唱時間', 'IsPercentage': True })
        self.assertEqual(parser.parse('變動詠唱-1~3%'), { 'Name': '變動詠唱時間', 'IsPercentage': True })
        self.assertEqual(parser.parse('變動詠唱減少5~8%'), { 'Name': '變動詠唱時間', 'IsPercentage': True })
        self.assertEqual(parser.parse('變詠時間 -1,2%'), { 'Name': '變動詠唱時間', 'IsPercentage': True })
        self.assertEqual(parser.parse('MaxHP+1%'), { 'Name': 'MHP', 'IsPercentage': True })
        self.assertEqual(parser.parse('MaxHP+10~15%'), { 'Name': 'MHP', 'IsPercentage': True })
        self.assertEqual(parser.parse('MHP + 1~2%'), { 'Name': 'MHP', 'IsPercentage': True })
        self.assertEqual(parser.parse('MHP+1~5%'), { 'Name': 'MHP', 'IsPercentage': True })
        self.assertEqual(parser.parse('MHP + 200'), { 'Name': 'MHP', 'IsPercentage': False })
        self.assertEqual(parser.parse('MHP+500~1000'), { 'Name': 'MHP', 'IsPercentage': False })
        self.assertEqual(parser.parse('MaxHP+100~500'), { 'Name': 'MHP', 'IsPercentage': False })
        self.assertEqual(parser.parse('MHP + 200,40'), { 'Name': 'MHP', 'IsPercentage': False })
        self.assertEqual(parser.parse('MSP+1~5%'), { 'Name': 'MSP', 'IsPercentage': True })
        self.assertEqual(parser.parse('MaxSP+1%'), { 'Name': 'MSP', 'IsPercentage': True })
        self.assertEqual(parser.parse('MaxSP+1~3%'), { 'Name': 'MSP', 'IsPercentage': True })
        self.assertEqual(parser.parse('MSP + 1~2%'), { 'Name': 'MSP', 'IsPercentage': True })
        self.assertEqual(parser.parse('MSP + 25,50'), { 'Name': 'MSP', 'IsPercentage': False })
        self.assertEqual(parser.parse('MSP + 25'), { 'Name': 'MSP', 'IsPercentage': False })
        self.assertEqual(parser.parse('MSP+50~1000'), { 'Name': 'MSP', 'IsPercentage': False })
        self.assertEqual(parser.parse('MaxSP+20~100'), { 'Name': 'MSP', 'IsPercentage': False })
        self.assertEqual(parser.parse('遠距離攻擊增加+1~5%'), { 'Name': '遠距離物理傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('遠距離攻擊增加1~5%'), { 'Name': '遠距離物理傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('遠距離物理傷害 + 1,2%'), { 'Name': '遠距離物理傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('遠距離物理傷害+1~5%'), { 'Name': '遠距離物理傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('遠距離物理攻擊傷害+1~5%'), { 'Name': '遠距離物理傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('近距離物理攻擊傷害+1~5%'), { 'Name': '近距離物理傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('暴擊傷害+1~5%'), { 'Name': '暴擊傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('不可破壞'), { 'Name': '不可破壞', 'IsPercentage': False })
        self.assertEqual(parser.parse('ATK  + 1'), { 'Name': 'ATK', 'IsPercentage': False })
        self.assertEqual(parser.parse('ATK + 1~3'), { 'Name': 'ATK', 'IsPercentage': False })
        self.assertEqual(parser.parse('ATK +  1,3'), { 'Name': 'ATK', 'IsPercentage': False })
        self.assertEqual(parser.parse('技能後延遲-1~5%'), { 'Name': '技能後延遲', 'IsPercentage': True })
        self.assertEqual(parser.parse('技能後延遲減少1~3%'), { 'Name': '技能後延遲', 'IsPercentage': True })
        self.assertEqual(parser.parse('技能的後延遲減少1~5%'), { 'Name': '技能後延遲', 'IsPercentage': True })
        self.assertEqual(parser.parse('攻擊速度增加(攻擊後延遲-%)1~5'), { 'Name': '攻擊速度增加(攻擊後延遲)', 'IsPercentage': True })
        self.assertEqual(parser.parse('攻擊速度增加(攻擊後延遲-1~5%)'), { 'Name': '攻擊速度增加(攻擊後延遲)', 'IsPercentage': True })
        self.assertEqual(parser.parse('攻擊速度增加(攻擊後延遲減少%)1~5%'), { 'Name': '攻擊速度增加(攻擊後延遲)', 'IsPercentage': True })
        self.assertEqual(parser.parse('減少攻擊後延遲1~5%'), { 'Name': '攻擊速度增加(攻擊後延遲)', 'IsPercentage': True })
        self.assertEqual(parser.parse('減少攻擊後延遲1,2%'), { 'Name': '攻擊速度增加(攻擊後延遲)', 'IsPercentage': True })
        self.assertEqual(parser.parse('攻擊速度增加(攻擊後延遲-3%)'), { 'Name': '攻擊速度增加(攻擊後延遲)', 'IsPercentage': True })
        self.assertEqual(parser.parse('必殺技傷害增加+1~5%'), { 'Name': '暴擊傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('對小型魔物受到的物理攻擊減少1~3%'), { 'Name': '對小型魔物受到的物理攻擊', 'IsPercentage': True })
        self.assertEqual(parser.parse('遭受中型怪的魔法傷害減少 1,2%'), { 'Name': '遭受中型怪的魔法傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('受到近距離物理傷害減少1,2%'), { 'Name': '受到近距離物理傷害', 'IsPercentage': True })
        self.assertEqual(parser.parse('被無屬性魔物受到的物理傷害力減少 3~5%'), { 'Name': '被無屬性魔物受到的物理傷害力', 'IsPercentage': True })
        self.assertEqual(parser.parse('使用技能SP消耗減少 1~3%'), { 'Name': '使用技能SP消耗', 'IsPercentage': True })
        self.assertEqual(parser.parse('使用技能SP消耗減少 1,2%'), { 'Name': '使用技能SP消耗', 'IsPercentage': True })

if __name__ == '__main__':
    unittest.main()